package Main;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;

import javax.swing.*;

public class NewMemberForm extends JFrame{
	String [] labels = {"사원번호: ", "*사원명:", "*패스워드:", "*패스워드재입력:"};
	JButton insertbtn; // 등록
	JButton disposebtn; // 닫기
	JTextField [] fields; // 입력받을 창
	JPasswordField [] passfields; // 비밀번호 입력창
	private Connection con; //  db연결
	String pw1="", pw2=""; // 비밀번호 확인
	JLabel comp; // 일치 불일치 확인
	public NewMemberForm() {
		setTitle("사원등록");
		// x버튼을 클릭했을 때 메인폼으로
		this.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {new MainForm();}
		});
		
		con = (Connection) Driver_con.Driver_con();
		
		this.add(new CenterP());
		
		setSize(400,300);
		setVisible(true);
	}
	// 중간
	class CenterP extends JPanel{
		public CenterP() {
			this.setLayout(new GridLayout(1,2));
			this.add(new Panel1());
			this.add(new Panel2());
		}
	}
	class Panel1 extends JPanel{ // 입력받을명을 담을 panel + 등록btn
		public Panel1() {
			this.setLayout(new GridLayout(5,1)); // 1행 5열
			JPanel panel = new JPanel();
			for(int i=0; i<labels.length; i++) {
				if(i==3) { // 일치 불일치 
					panel.setLayout(new GridLayout(1,2));
					panel.add(new JLabel(labels[i]));
					comp = new JLabel("");
					panel.add(comp);
					this.add(panel);
				}else {
					this.add(new JLabel(labels[i]));
				}
				
			}
			insertbtn = new JButton("등록");
			insertbtn.addActionListener(new ActionListener() { // 등록버튼 클릭시
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					if(fields[1].getText().length()==0 || passfields[0].getText().length()==0 || passfields[1].getText().length()==0) {
						JOptionPane.showMessageDialog(null, "필수 항목(*) 누락", "Message",JOptionPane.ERROR_MESSAGE);
						return;
					}
					if(comp.getText().equals("불일치")) {
						JOptionPane.showMessageDialog(null, "패스워드 확인 요망", "Message",JOptionPane.ERROR_MESSAGE);
						return;
					}
					String sql = "insert into member values(?,?,?)";
					try {
						PreparedStatement psmt = (PreparedStatement) con.prepareStatement(sql);
						psmt.setInt(1, Integer.parseInt(fields[0].getText()));
						psmt.setString(2, fields[1].getText());
						psmt.setString(3, passfields[0].getText());
						
						int rs = psmt.executeUpdate();
						if(rs==1) {
							JOptionPane.showMessageDialog(null, "사원이 등록되었습니다.","Message",JOptionPane.INFORMATION_MESSAGE);
							dispose();
							new MainForm();
						}
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
					
				}
			});
			this.add(insertbtn);
		}
	}
	class Panel2 extends JPanel{ // 입력받을창을 담을 panel + 닫기btn
		public Panel2() {
			this.setLayout(new GridLayout(5,1));
			fields = new JTextField[2];
			passfields = new JPasswordField[2];
			
			for(int i=0; i<2; i++) {
				if(i==0) { // 마지막 사원번호 + 1
					String sql = "select memberNo from member order by memberNo desc limit 1";
					Statement st = null;
					ResultSet rs = null;
					int memberNo;
					try {
						st = (Statement) con.createStatement();
						rs = st.executeQuery(sql);
						
						while(rs.next()) {
							memberNo = Integer.parseInt(rs.getString("memberNo"))+1;
							fields[i] = new JTextField(Integer.toString(memberNo));
							fields[i].enable(false);
						}
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}else {
					fields[i] = new JTextField(10); 
				}
				this.add(fields[i]);
			}
			for(int i=0; i<2; i++) { // 비밀번호 입력창 2개 
				passfields[i] = new JPasswordField(10);
				if(i==0) {passfields[i].addKeyListener(new Keyevents1());} // 첫번째 비밀번호 이벤트
				else {passfields[i].addKeyListener(new Keyevents2());} // 두번째 비밀번호 이벤트
				
				this.add(passfields[i]);
				this.setRequestFocusEnabled(true);
			}
			disposebtn = new JButton("닫기"); //  닫기 버튼 클릭 시
			disposebtn.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					dispose();
					new MainForm();
				}
			});
			this.add(disposebtn);
		}
	}
	// 첫번째 비밀번호 입력 이벤트
	class Keyevents1 extends KeyAdapter{
		@Override
		public void keyReleased(KeyEvent e) { // 누른키를 떼는 순간
			// TODO Auto-generated method stub
			char c = e.getKeyChar();
			if(c=='\b') { // 지웠을 때
				pw1 = pw1.substring(0,pw1.length()-1); // 제일 마지막에 입력받은 문자 지우기
			}
			if(Character.isDigit(c) && pw1.length()<4) { // 숫자를 입력받았고, 길이가 4글자 이하일 때
				pw1 = passfields[0].getText(); // pw1에 입력받은 문자열을 저장
				if(passfields[0].getText().length()>4 ) { // 길이가 4글자 이상이면 X
					passfields[0].setText(pw1);
				}
			}else {
				passfields[0].setText(pw1); // 숫자가 아닐시에는 전에 입력받은 문자열까지를 
			}
		}
	}
	// 두번째 비밀번호 입력 이벤트
	class Keyevents2 extends KeyAdapter{
		@Override
		public void keyReleased(KeyEvent e) {
			char c = e.getKeyChar();
			if(c=='\b') { // 지웠을 때
				pw2 = pw2.substring(0,pw2.length()-1); // 제일 마지막에 입력받은 문자 지우기
			}
			if(Character.isDigit(c) && pw2.length()<4 ) {// 숫자를 입력받았고, 길이가 4글자 이하일 때
				pw2 = passfields[1].getText();
				if(passfields[1].getText().equals(pw1)) { // 첫번째 입력받은 pw와 비교
					comp.setText("일치");
					comp.setForeground(Color.blue);
				}else {
					comp.setText("불일치");
					comp.setForeground(Color.red);
				}
				
				if(passfields[1].getText().length()>4) {// 길이가 4글자 이상이면 X
					passfields[1].setText(pw2);
				}
			}else {
				passfields[1].setText(pw2); // 숫자가 아닐시에는 전에 입력받은 문자열까지를 
			}
		}
	}
}
